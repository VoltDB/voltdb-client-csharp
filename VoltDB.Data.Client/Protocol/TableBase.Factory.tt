<#@ template language="C#v3.5" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>/* This file is part of VoltDB.
 * Copyright (C) 2008-2013 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
using System;
using VoltDB.Data.Client.Properties;

namespace VoltDB.Data.Client
{
    /// <summary>
    /// Partial class implementation: Support for Single-Column Table extraction.
    /// </summary>
    public partial class TableBase
    {
        /// <summary>
        /// Returns a straight data array (boxed) of the requested data type from a single-column Table.
        /// </summary>
        /// <param name="input">The deserializer hoding the response data.</param>
        /// <param name="TResult">The desired output data type of the array elements.</param>
        /// <returns>A boxed array of elements of the requested data type.</returns>
        internal static object FromSingleColumn(Deserializer input, Type TResult)
        {
            // Skip table length, metadata length, status, get column count.
            short columnCount = input.Skip(9).ReadInt16();

            // Validate there is indeed only one column.
            if (columnCount != 1)
                throw new VoltInvalidDataException(Resources.InvalidColumnCount, columnCount);

            // Read column data type.
            DBType columnType = (DBType)input.ReadSByte();

            // Validate the data type matches the .NET casting request.
            if (VoltType.ToDBType(TResult) != columnType)
                throw new VoltInvalidCastException(
                                                    Resources.InvalidCastException
                                                  , columnType.ToString()
                                                  , TResult.ToString()
                                                  );

            // Skip column name, get Row count.
            int rowCount = input.SkipString().ReadInt32();

            // Load data.
            switch (VoltType.ToNetType(TResult))
            {
<#
    foreach(KeyValuePair<string,string> pair in TypeMap)
    {
#>
                case VoltType.NetType.<#= pair.Key #>:
                    <#= pair.Value #>[] data<#= pair.Key #> = new <#= pair.Value #>[rowCount];
                    for (int r = 0; r < rowCount; r++)
                        data<#= pair.Key #>[r] = input.Skip(4).Read<#= pair.Key #>();
                    return data<#= pair.Key #>;

<#
    }
#>
                default:
                    throw new VoltUnsupportedTypeException(Resources.UnsupportedParameterNETType, TResult.ToString());
            }
        }

        /// <summary>
        /// Returns a single value (strongly-type) of the requested data type from a single-row/single-column Table.
        /// </summary>
        /// <typeparam name="TResult">The desired output data type of the returned value.</typeparam>
        /// <param name="input">The deserializer hoding the response data.</param>
        /// <returns>The single cell contained in the table read.</returns>
        internal static TResult FromSingleValue<TResult>(Deserializer input)
        {
            // Skip basic metadata and get Column Count.
            short columnCount = input.Skip(9).ReadInt16();

            // Read column data type.
            DBType columnType = (DBType)input.ReadSByte();

            // Validate the data type matches the .NET casting request
            if (VoltType.ToDBType(typeof(TResult)) != columnType)
                throw new VoltInvalidCastException(
                                                    Resources.InvalidCastException
                                                  , columnType.ToString()
                                                  , typeof(TResult).ToString()
                                                  );

            // Skip column name and get Row count.
            int rowCount = input.SkipString().ReadInt32();
            
            // Validate there is indeed only one column and row.
            if ((columnCount != 1) || (rowCount != 1))
                throw new VoltInvalidDataException(Resources.InvalidRowAndColumnCount, rowCount, columnCount);

            // Load data (skip row length and load first value) - unfortunately, we do have to box this.
            switch (VoltType.ToNetType(typeof(TResult)))
            {
<#
    foreach(KeyValuePair<string,string> pair in TypeMap)
    {
#>
                case VoltType.NetType.<#= pair.Key #>:
                    return (TResult)(object)input.Skip(4).Read<#= pair.Key #>();

<#
    }
#>
                default:
                    throw new VoltUnsupportedTypeException(
                                                            Resources.UnsupportedParameterNETType
                                                          , typeof(TResult).ToString()
                                                          );
            }
        }
    }
}
<#+
//  TT support: the type map used for code-generation
static Dictionary<string,string> TypeMap = new Dictionary<string,string>()
{
  { "Byte", "byte" }
, { "ByteN", "byte?" }
, { "SByte", "sbyte" }
, { "SByteN", "sbyte?" }
, { "Int16", "short" }
, { "Int16N", "short?" }
, { "Int32", "int" }
, { "Int32N", "int?" }
, { "Int64", "long" }
, { "Int64N", "long?" }
, { "Double", "double" }
, { "DoubleN", "double?" }
, { "DateTime", "DateTime" }
, { "DateTimeN", "DateTime?" }
, { "String", "string" }
, { "VoltDecimal", "VoltDecimal" }
, { "VoltDecimalN", "VoltDecimal?" }
, { "Decimal", "Decimal" }
, { "DecimalN", "Decimal?" }
};
#>