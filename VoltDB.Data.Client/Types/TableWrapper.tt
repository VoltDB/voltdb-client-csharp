<#@ template language="C#v3.5" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ Include File="../Manager.tt" #>
<# Initialize(this); #>
<# Manager manager = Manager.Create(Host, GenerationEnvironment); #>
<#

    for(int i = MinParams; i < MaxParams; i++)
    {
        manager.StartNewFile("Row[" + GetTypeListName(i) + "].cs");

#>/* This file is part of VoltDB.
 * Copyright (C) 2008-2016 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

namespace VoltDB.Data.Client
{
    /// <summary>
    /// Defines a table row on a table with <#= i #> columns.
    /// </summary><#= GetTypeParamComments(i) #>
    public class Row<<#= GetTypeList(i).Substring(2) #>>
    {
        /// <summary>
        /// The table (wrapper) owning this row.
        /// </summary>
        private Table<<#= GetTypeList(i).Substring(2) #>> Table;
        
        /// <summary>
        /// Index of the row in the underlying table (wrapper).
        /// </summary>
        private int Index = -1;
        
        /// <summary>
        /// Protected constructor - for the client API, table rows can only be spawned from an existing table.
        /// </summary>
        /// <param name="tableWrapper">The table (wrapper) the row belongs to.</param>
        /// <param name="rowIndex">Index of the row in the table's row collection.</param>
        protected internal Row(Table<<#= GetTypeList(i).Substring(2) #>> tableWrapper, int rowIndex)
        {
            this.Table = tableWrapper;
            this.Index = rowIndex;
        }
<#
for(int j=0; j< i; j++)
{
#>

        /// <summary>
        /// Returns the (strongly-typed) value of column <#= j+1 #> for this row.
        /// </summary>
        public T<#= j+1 #> Column<#= j+1 #>
        {
            get
            {
                return this.Table.Column<#= j+1 #>(this.Index);
            }
        }
<# } #>
    }
}
<#
        manager.EndBlock();
        
        manager.StartNewFile("RowEnumerator[" + GetTypeListName(i) + "].cs");

#>/* This file is part of VoltDB.
 * Copyright (C) 2008-2016 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
using System;
using System.Collections;
using System.Collections.Generic;

namespace VoltDB.Data.Client
{
    /// <summary>
    /// Provides a shalow enumerable collection of strongly-typed rows that can easily be queried against using LINQ.
    /// This enumerator operates on a Table wrapper created for a table with <#= i #> columns.
    /// </summary><#= GetTypeParamComments(i) #>
    public class RowCollection<<#= GetTypeList(i).Substring(2) #>> : IEnumerable<Row<<#= GetTypeList(i).Substring(2) #>>>
    {
        /// <summary>
        /// Table this row collection belongs to.
        /// </summary>
        private Table<<#= GetTypeList(i).Substring(2) #>> Table;

        /// <summary>
        /// Internal constructor - row collections can only be spawned from an existing table (wrapper).
        /// </summary>
        /// <param name="tableWrapper">The table (wrapper) the row collection belongs to.</param>
        internal RowCollection(Table<<#= GetTypeList(i).Substring(2) #>> tableWrapper)
        {
            this.Table = tableWrapper;
        }

        /// <summary>
        /// Returns a strongly-typed enumerator for the collection.
        /// </summary>
        /// <returns>The collection enumerator.</returns>
        public IEnumerator<Row<<#= GetTypeList(i).Substring(2) #>>> GetEnumerator()
        {
            return new RowEnumerator<<#= GetTypeList(i).Substring(2) #>>(this.Table);
        }
        /// <summary>
        /// Returns a general enumerator for the collection.
        /// </summary>
        /// <returns>The collection enumerator.</returns>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return new RowEnumerator<<#= GetTypeList(i).Substring(2) #>>(this.Table);
        }

        /// <summary>
        /// Enumerator class for the row collection.
        /// </summary><#= GetTypeParamComments(i,"    ").Replace("name=\"T","name=\"E") #>
        public class RowEnumerator<<#= GetTypeList(i).Substring(2).Replace("T","E") #>> : IEnumerator<Row<<#= GetTypeList(i).Substring(2).Replace("T","E") #>>>
        {
            /// <summary>
            /// Table (wrapper) the parent row collection belongs to.
            /// </summary>
            private Table<<#= GetTypeList(i).Substring(2).Replace("T","E") #>> Table;

            /// <summary>
            /// Position of the enumerator in the underlying collection.
            /// </summary>
            private int Position = -1;

            /// <summary>
            /// Protected constructor - instantiation is only allowed as part of the Table support framework.
            /// </summary>
            /// <param name="tableWrapper">The Table (wrapper) upon which the enumerator operates.</param>
            protected internal RowEnumerator(Table<<#= GetTypeList(i).Substring(2).Replace("T","E") #>> tableWrapper)
            {
                this.Table = tableWrapper;
            }

            /// <summary>
            /// Returns the (strongly-typed) element the enumerator currently points to.
            /// </summary>
            public Row<<#= GetTypeList(i).Substring(2).Replace("T","E") #>> Current
            {
                get
                {
                    if ((this.Position > -1) && (this.Position < this.Table.RowCount))
                        return new Row<<#= GetTypeList(i).Substring(2).Replace("T","E") #>>(this.Table, this.Position);
                    else
                        throw new InvalidOperationException();
                }
            }

            /// <summary>
            /// Moves the enumerator to the next element in the collection.
            /// </summary>
            /// <returns>true if the enumerator was successfully advanced to the next row; false if the enumerator has
            /// passed the end of the collection.</returns>
            public bool MoveNext()
            {
                this.Position++;
                return this.Position < this.Table.RowCount;
            }

            /// <summary>
            /// Rewinds the enumerator to the beginning.
            /// </summary>
            public void Reset()
            {
                this.Position = -1;
            }

            /// <summary>
            /// General interface implementation: Returns the (boxed) element the enumerator currently points to.
            /// </summary>
            object IEnumerator.Current
            {
                get
                {
                    if ((this.Position > 0) && (this.Position < this.Table.RowCount))
                        return new Row<<#= GetTypeList(i).Substring(2).Replace("T","E") #>>(this.Table, this.Position);
                    else
                        throw new InvalidOperationException();
                }
            }

            /// <summary>
            /// Dispose of used resources.
            /// </summary>
            public void Dispose() { }
        }
    }
}
<#
        manager.EndBlock();

        manager.StartNewFile("Table[" + GetTypeListName(i) + "].cs");

#>/* This file is part of VoltDB.
 * Copyright (C) 2008-2016 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

using VoltDB.Data.Client.Properties;

namespace VoltDB.Data.Client
{
    /// <summary>
    /// Defines a table wrapper for a table with <#= i #> columns.
    /// </summary><#= GetTypeParamComments(i) #>
    public class Table<<#= GetTypeList(i).Substring(2) #>>
    {
        /// <summary>
        /// Table from which the wrapper feeds.
        /// </summary>
        private Table RawTable;

        /// <summary>
        /// Internal storage for the Row collection.
        /// </summary>
        private readonly RowCollection<<#= GetTypeList(i).Substring(2) #>> _Rows;

        /// <summary>
        /// Provides an enumerable collection of records on the table, allowing for full LINQ support.
        /// </summary>
        public RowCollection<<#= GetTypeList(i).Substring(2) #>> Rows
        {
            get
            {
                return this._Rows;
            }
        }
        
        /// <summary>
        /// Number of records in the table.
        /// </summary>
        public int RowCount
        {
            get
            {
                return this.RawTable.RowCount;
            }
        }

        /// <summary>
        /// Convenience flag indicating the table actually has data (RowCount > 0).
        /// </summary>
        public bool HasData
        {
            get
            {
                return this.RawTable.RowCount > 0;
            }
        }

        /// <summary>
        /// Instantiate a strongly-typed Table Wrapper around the given generic Table.
        /// </summary>
        /// <param name="table">The table to build the wrapper for.</param>
        internal Table(Table table)
        {
            // Validate column count.
            if (table.ColumnCount != <#= i #>)
                throw new VoltInvalidDataException(Resources.InvalidColumnCount, table.ColumnCount);

            // Validate column data types.
<#
for(int j=0; j< i; j++)
{
#>
            if (!(VoltType.ToDefaultNetType(table.GetColumnDBType(<#= j #>)) == (typeof(T<#= j+1 #>))))
                throw new VoltInvalidCastException(
                                                    Resources.InvalidCastException
                                                  , VoltType.ToDefaultNetType(table.GetColumnDBType(<#= j #>)).ToString()
                                                  , typeof(T<#= j+1 #>).ToString()
                                                  );

<# } #>
            // Validation complete, keep a reference to the raw table.
            this.RawTable = table;

            // Attach the enumerable row collection.
            this._Rows = new RowCollection<<#= GetTypeList(i).Substring(2) #>>(this);
        }
<#
for(int j=0; j< i; j++)
{
#>
        /// <summary>
        /// Returns a strongly-typed raw data array for the column.
        /// </summary>
        /// <returns>Raw data array of the column content.</returns>
        public T<#= j+1 #>[] Column<#= j+1 #>()
        {
            return this.RawTable.GetColumnData<T<#= j+1 #>>(<#= j #>);
        }

        /// <summary>
        /// Returns a specific element in the column, at the given row index.
        /// This method is provided for full-coverage, however, if you find yourself iterating through the column
        /// records this way, you are likely better off grabbing the raw data and iterating on a strongly-typed array.
        /// </summary>
        /// <param name="rowIndex">Row index of the element to retrieve.</param>
        /// <returns>The element (field) value.</returns>
        public T<#= j+1 #> Column<#= j+1 #>(int rowIndex)
        {
            return this.RawTable.GetValue<T<#= j+1 #>>(<#= j #>, rowIndex);
        }
<# } #>
    }
}
<#
        manager.EndBlock();

        manager.StartNewFile("SingleRowTable[" + GetTypeListName(i) + "].cs");

#>/* This file is part of VoltDB.
 * Copyright (C) 2008-2016 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

using VoltDB.Data.Client.Properties;

namespace VoltDB.Data.Client
{
    /// <summary>
    /// Defines a table wrapper for a table with <#= i #> columns.
    /// </summary><#= GetTypeParamComments(i) #>
    public class SingleRowTable<<#= GetTypeList(i).Substring(2) #>>
    {
        /// <summary>
        /// Table from which the wrapper feeds.
        /// </summary>
        private SingleRowTable RawTable;

        /// <summary>
        /// Convenience flag indicating the table actually has data (RowCount > 0).
        /// </summary>
        public bool HasData
        {
            get
            {
                return this.RawTable.RowCount > 0;
            }
        }

        /// <summary>
        /// Instantiate a strongly-typed Table Wrapper around the given generic Table.
        /// </summary>
        /// <param name="table">The single-row table to build the wrapper for.</param>
        internal SingleRowTable(SingleRowTable table)
        {
            // Validate column count.
            if (table.ColumnCount != <#= i #>)
                throw new VoltInvalidDataException(Resources.InvalidColumnCount, table.ColumnCount);

            // Validate column data types.
<#
for(int j=0; j< i; j++)
{
#>
            if (!(VoltType.ToDefaultNetType(table.GetColumnDBType(<#= j #>)) == (typeof(T<#= j+1 #>))))
                throw new VoltInvalidCastException(
                                                    Resources.InvalidCastException
                                                  , VoltType.ToDefaultNetType(table.GetColumnDBType(<#= j #>)).ToString()
                                                  , typeof(T<#= j+1 #>).ToString()
                                                  );

<# } #>
            // Validation complete, keep a reference to the raw table.
            this.RawTable = table;
        }
<#
for(int j=0; j< i; j++)
{
#>
        /// <summary>
        /// Returns the value for Column<#= j+1 #>.
        /// </summary>
        /// <returns>The element (field) value.</returns>
        public T<#= j+1 #> Column<#= j+1 #>
        {
            get
            {
                return this.RawTable.GetValue<T<#= j+1 #>>(<#= j #>);
            }
        }
<# } #>
    }
}
<#
        manager.EndBlock();
    }

        manager.StartNewFile("Table.Wrap.cs");

#>/* This file is part of VoltDB.
 * Copyright (C) 2008-2016 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

namespace VoltDB.Data.Client
{
    /// <summary>
    /// General implementation of a generic Table.
    /// </summary>
    public partial class Table
    {
<#
    for(int i = MinParams; i < MaxParams; i++)
    {
#>

        /// <summary>
        /// Returns a strongly-typed wrapper around the table instance.
        /// Use for a table with <#= i #> columns.
        /// Conversion is not possible, thus you MUST request the exact nullable type corresponding to the underlying
        /// data, or this call will fail.
        /// Valid types are: sbyte?, short?, int?, long?, double?, DateTime?, string, BigDecimal
        /// </summary><#= GetTypeParamComments(i,"    ") #>
        /// <returns>A strongly-typed table wrapper for the current table instance.</returns>
        public Table<<#= GetTypeList(i).Substring(2) #>> Wrap<<#= GetTypeList(i).Substring(2) #>>()
        {
            return new Table<<#= GetTypeList(i).Substring(2) #>>(this);
        }
<# } #>
    }
}
<#
        manager.EndBlock();
        
        manager.StartNewFile("SingleRowTable.Wrap.cs");

#>/* This file is part of VoltDB.
 * Copyright (C) 2008-2016 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

namespace VoltDB.Data.Client
{
    /// <summary>
    /// General implementation of a generic Table.
    /// </summary>
    public partial class SingleRowTable
    {
<#
    for(int i = MinParams; i < MaxParams; i++)
    {
#>

        /// <summary>
        /// Returns a strongly-typed wrapper around the table instance.
        /// Use for a single-row table with <#= i #> columns.
        /// Conversion is not possible, thus you MUST request the exact nullable type corresponding to the underlying
        /// data, or this call will fail.
        /// Valid types are: sbyte?, short?, int?, long?, double?, DateTime?, string, BigDecimal
        /// </summary><#= GetTypeParamComments(i,"    ") #>
        /// <returns>A strongly-typed table wrapper for the current table instance.</returns>
        public SingleRowTable<<#= GetTypeList(i).Substring(2) #>> Wrap<<#= GetTypeList(i).Substring(2) #>>()
        {
            return new SingleRowTable<<#= GetTypeList(i).Substring(2) #>>(this);
        }
<# } #>
    }
}
<#
        manager.EndBlock();
        
    manager.Process(true);

#>
<#+
	static TextTransformation TT;
	static int MinParams = 2;
	static int MaxParams = 36;
	void Initialize(TextTransformation tt)
	{
		// Initialize instance
		TT = tt;
    }
    static string GetTypeListName(int count)
    {
        if (count == 2)
            return "T1,T2";
        else
            return string.Format("T1,...,T{0}", count);
    }
    static string GetTypeList(int count)
    {
        if (count==0)
            return "";
        string result = "";
        for(int i = 1;i<count+1;i++)
            result += string.Format(", T{0}", i);
        return result;
    }
    static string GetParameterDefinitionList(int count, bool withComma)
    {
        if (count==0)
            return "";
        string result = "";
        for(int i = 1;i<count+1;i++)
            result += string.Format(", T{0} parameter{0}", i);
        return withComma ? result : result.Substring(2);
    }
    static string GetParameterCallList(int count, bool withComma)
    {
        if (count==0)
            return "";
        string result = "";
        for(int i = 1;i<count+1;i++)
            result += string.Format(", parameter{0}", i);
        return withComma ? result : result.Substring(2);
    }
    static string GetTypeParamComments(int count)
    {
        return GetTypeParamComments(count, "");
    }
    static string GetTypeParamComments(int count,string prefix)
    {
        if (count==0)
            return "";
        string result = "";
        for(int i = 1;i<count+1;i++)
            result += string.Format("\r\n" + prefix + "    /// <typeparam name=\"T{0}\">Type of column {0} of the underlying table.</typeparam>", i);
        return result;
    }
    static string GetParamComments(int count)
    {
        if (count==0)
            return "";
        string result = "";
        for(int i = 1;i<count+1;i++)
            result += string.Format("\r\n        /// <param name=\"parameter{0}\">Value of parameter {0}.</param>", i);
        return result;
    }
    static string GetWriteProcParams(int count)
    {
        if (count==0)
            return "\r\n";
        string result = "";
        for(int i = 1;i<count+1;i++)
            result += string.Format("\r\n                                 .WriteParameter(parameter{0})", i);
        return result;
    }
    
#>